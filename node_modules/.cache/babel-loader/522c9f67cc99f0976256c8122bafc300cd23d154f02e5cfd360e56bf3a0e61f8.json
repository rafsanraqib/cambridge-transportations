{"ast":null,"code":"var _jsxFileName = \"/Users/rafsanraqib/Documents/Cambridge Transportations/location-draft/src/Components/DriverSearchForm.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport determineLatLongFromAddress from '../Geolocation/locationServices';\nimport { determineDistanceBetweenDriverPatient } from '../Geolocation/locationServices';\nimport driversList from '../Model/driverModel';\n//import determineLatLongFromAddress from '../Geolocation/locationServices';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DriverSearchByLocation() {\n  _s();\n  const [patientInfo, setPatientName] = React.useState(null);\n  const [patientPickupAddress, setPatientPickupAddress] = React.useState(null);\n  const [patientPickupTime, setPatientPickupTime] = React.useState(null);\n  const [patientNotes, setPatientNotes] = React.useState(null);\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const {\n      lat,\n      lng\n    } = await determineLatLongFromAddress(patientPickupAddress);\n    var optimumDriverList = [];\n    driversList.forEach(function (driver) {\n      const lat1 = driver.latitude;\n      const lng1 = driver.longitude;\n      var distance = determineDistanceBetweenDriverPatient(lat, lng, lat1, lng1);\n      const driverData = {\n        id: driver.driverID,\n        driverName: driver.name,\n        vehicleId: driver.vehicleId,\n        distanceFromPatient: distance\n      };\n      optimumDriverList.push(driverData);\n    });\n    optimumDriverList.sort(function (a, b) {\n      return a.distanceFromPatient - b.distanceFromPatient;\n    });\n    dispatch({\n      type: 'SETPATIENTDATA',\n      payload: {\n        id: patientInfo,\n        patientPickupAddress,\n        patientPickupTime,\n        patientNotes\n      }\n    });\n    navigate(\"/listDrivers\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"auth-form-div\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"driver-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Patient Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setPatientName(e.target.value),\n        placeholder: \"Patient Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Pickup Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setPatientPickupAddress(e.target.value),\n        placeholder: \"Apt no., Street, City, Zip, State\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Pickup Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setPatientPickupTime(e.target.value),\n        placeholder: \"Pickup Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Patient Notes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setPatientNotes(e.target.value),\n        placeholder: \"Patient Notes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"driver-button\",\n        type: \"submit\",\n        children: \"Drivers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(DriverSearchByLocation, \"GwQ4pTvOLZmGbmQ4jPIBl/tBwAw=\", false, function () {\n  return [useNavigate, useDispatch];\n});\n_c = DriverSearchByLocation;\nvar _c;\n$RefreshReg$(_c, \"DriverSearchByLocation\");","map":{"version":3,"names":["React","useDispatch","useNavigate","determineLatLongFromAddress","determineDistanceBetweenDriverPatient","driversList","jsxDEV","_jsxDEV","DriverSearchByLocation","_s","patientInfo","setPatientName","useState","patientPickupAddress","setPatientPickupAddress","patientPickupTime","setPatientPickupTime","patientNotes","setPatientNotes","navigate","dispatch","handleSubmit","e","preventDefault","lat","lng","optimumDriverList","forEach","driver","lat1","latitude","lng1","longitude","distance","driverData","id","driverID","driverName","name","vehicleId","distanceFromPatient","push","sort","a","b","type","payload","className","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","onChange","target","value","placeholder","_c","$RefreshReg$"],"sources":["/Users/rafsanraqib/Documents/Cambridge Transportations/location-draft/src/Components/DriverSearchForm.js"],"sourcesContent":["import React from 'react'\nimport { useDispatch} from 'react-redux';\nimport {useNavigate}from 'react-router-dom';\nimport determineLatLongFromAddress from '../Geolocation/locationServices'\nimport {determineDistanceBetweenDriverPatient} from '../Geolocation/locationServices';\nimport driversList from '../Model/driverModel';\n//import determineLatLongFromAddress from '../Geolocation/locationServices';\n\nexport default function DriverSearchByLocation() {\n    const [patientInfo, setPatientName] = React.useState(null);\n    const [patientPickupAddress, setPatientPickupAddress] = React.useState(null);\n    const [patientPickupTime, setPatientPickupTime] = React.useState(null);\n    const [patientNotes, setPatientNotes] = React.useState(null);\n    const navigate = useNavigate();\n    const dispatch = useDispatch();\n\n    const handleSubmit = async (e) => {\n      e.preventDefault();\n      \n      const {lat, lng} = await determineLatLongFromAddress(patientPickupAddress);\n      var optimumDriverList = [];\n      driversList.forEach(function (driver) {\n        const lat1 = driver.latitude;\n        const lng1 = driver.longitude;\n\n        var distance = determineDistanceBetweenDriverPatient(lat, lng, lat1, lng1);\n        const driverData = {id: driver.driverID, driverName: driver.name, vehicleId: driver.vehicleId, \n          distanceFromPatient: distance};\n\n        optimumDriverList.push(driverData);\n      });\n\n      optimumDriverList.sort(function(a,b){\n        return a.distanceFromPatient - b.distanceFromPatient\n      });\n\n        dispatch({\n          type: 'SETPATIENTDATA',\n          payload: {\n            id: patientInfo,patientPickupAddress,patientPickupTime,patientNotes\n          }\n        }); \n        navigate(\"/listDrivers\");\n      };\n\n  return (\n    <div className='auth-form-div'>\n        <form onSubmit={handleSubmit} className=\"driver-form\">\n            <label>Patient Name</label>\n            <input onChange={(e) => setPatientName(e.target.value)} placeholder='Patient Name'></input>\n\n\n            <label>Pickup Address</label>\n            <input onChange={(e) => setPatientPickupAddress(e.target.value)} placeholder='Apt no., Street, City, Zip, State'></input>\n\n            <label>Pickup Time</label>\n            <input onChange={(e) => setPatientPickupTime(e.target.value)} placeholder='Pickup Time'></input>\n\n            <label>Patient Notes</label>\n            <input onChange={(e) => setPatientNotes(e.target.value)} placeholder='Patient Notes'></input>\n\n            <button className='driver-button' type=\"submit\">\n              Drivers \n            </button>\n        </form>\n    </div>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}