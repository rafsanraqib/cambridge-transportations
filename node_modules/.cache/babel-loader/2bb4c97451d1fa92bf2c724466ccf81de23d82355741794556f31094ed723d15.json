{"ast":null,"code":"import Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyDgsfpxic6s4iKc27-OmT1tgdyfcdTuOVQ\");\nGeocode.setLanguage(\"en\");\nGeocode.setRegion(\"es\");\nGeocode.setLocationType(\"ROOFTOP\");\nGeocode.enableDebug();\nvar latitude = 0;\nvar longitude = 0;\nconst determineLatLongFromAddress = async address => {\n  // Get latitude & longitude from address.\n  const response = await Geocode.fromAddress(address);\n  const {\n    lat,\n    lng\n  } = response.results[0].geometry.location;\n  return {\n    lat,\n    lng\n  };\n};\nfunction distanceInMiles(lat1, lon1, lat2, lon2) {\n  if (lat1 == lat2 && lon1 == lon2) {\n    return 0;\n  } else {\n    var radlat1 = Math.PI * lat1 / 180;\n    var radlat2 = Math.PI * lat2 / 180;\n    var theta = lon1 - lon2;\n    var radtheta = Math.PI * theta / 180;\n    var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n    if (dist > 1) {\n      dist = 1;\n    }\n    dist = Math.acos(dist);\n    dist = dist * 180 / Math.PI;\n    dist = dist * 60 * 1.1515;\n    return dist;\n  }\n}\n\n// const determineDistanceBetween = (coordinates1, coordinates2)  => { \n//     //TODO \n// };\n\nexport default determineLatLongFromAddress;","map":{"version":3,"names":["Geocode","setApiKey","setLanguage","setRegion","setLocationType","enableDebug","latitude","longitude","determineLatLongFromAddress","address","response","fromAddress","lat","lng","results","geometry","location","distanceInMiles","lat1","lon1","lat2","lon2","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos"],"sources":["/Users/rafsanraqib/Documents/Cambridge Transportations/location-draft/src/Geolocation/locationServices.js"],"sourcesContent":["\nimport Geocode from \"react-geocode\";\n\nGeocode.setApiKey(\"AIzaSyDgsfpxic6s4iKc27-OmT1tgdyfcdTuOVQ\");\nGeocode.setLanguage(\"en\");\nGeocode.setRegion(\"es\");\nGeocode.setLocationType(\"ROOFTOP\");\nGeocode.enableDebug();\n\nvar latitude  = 0;\nvar longitude = 0;\n\nconst determineLatLongFromAddress = async(address) => {\n    // Get latitude & longitude from address.\n    const response = await Geocode.fromAddress(address);\n\n    const {lat, lng} = response.results[0].geometry.location;\n\n    return {lat, lng};\n};\n\nfunction distanceInMiles(lat1, lon1, lat2, lon2) {\n\tif ((lat1 == lat2) && (lon1 == lon2)) {\n\t\treturn 0;\n\t}\n\telse {\n\t\tvar radlat1 = Math.PI * lat1/180;\n\t\tvar radlat2 = Math.PI * lat2/180;\n\t\tvar theta = lon1-lon2;\n\t\tvar radtheta = Math.PI * theta/180;\n\t\tvar dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n\t\tif (dist > 1) {\n\t\t\tdist = 1;\n\t\t}\n\t\tdist = Math.acos(dist);\n\t\tdist = dist * 180/Math.PI;\n\t\tdist = dist * 60 * 1.1515;\n\t\treturn dist;\n\t}\n}\n\n// const determineDistanceBetween = (coordinates1, coordinates2)  => { \n//     //TODO \n// };\n\n\nexport default determineLatLongFromAddress;\n"],"mappings":"AACA,OAAOA,OAAO,MAAM,eAAe;AAEnCA,OAAO,CAACC,SAAS,CAAC,yCAAyC,CAAC;AAC5DD,OAAO,CAACE,WAAW,CAAC,IAAI,CAAC;AACzBF,OAAO,CAACG,SAAS,CAAC,IAAI,CAAC;AACvBH,OAAO,CAACI,eAAe,CAAC,SAAS,CAAC;AAClCJ,OAAO,CAACK,WAAW,EAAE;AAErB,IAAIC,QAAQ,GAAI,CAAC;AACjB,IAAIC,SAAS,GAAG,CAAC;AAEjB,MAAMC,2BAA2B,GAAG,MAAMC,OAAO,IAAK;EAClD;EACA,MAAMC,QAAQ,GAAG,MAAMV,OAAO,CAACW,WAAW,CAACF,OAAO,CAAC;EAEnD,MAAM;IAACG,GAAG;IAAEC;EAAG,CAAC,GAAGH,QAAQ,CAACI,OAAO,CAAC,CAAC,CAAC,CAACC,QAAQ,CAACC,QAAQ;EAExD,OAAO;IAACJ,GAAG;IAAEC;EAAG,CAAC;AACrB,CAAC;AAED,SAASI,eAAeA,CAACC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAE;EAChD,IAAKH,IAAI,IAAIE,IAAI,IAAMD,IAAI,IAAIE,IAAK,EAAE;IACrC,OAAO,CAAC;EACT,CAAC,MACI;IACJ,IAAIC,OAAO,GAAGC,IAAI,CAACC,EAAE,GAAGN,IAAI,GAAC,GAAG;IAChC,IAAIO,OAAO,GAAGF,IAAI,CAACC,EAAE,GAAGJ,IAAI,GAAC,GAAG;IAChC,IAAIM,KAAK,GAAGP,IAAI,GAACE,IAAI;IACrB,IAAIM,QAAQ,GAAGJ,IAAI,CAACC,EAAE,GAAGE,KAAK,GAAC,GAAG;IAClC,IAAIE,IAAI,GAAGL,IAAI,CAACM,GAAG,CAACP,OAAO,CAAC,GAAGC,IAAI,CAACM,GAAG,CAACJ,OAAO,CAAC,GAAGF,IAAI,CAACO,GAAG,CAACR,OAAO,CAAC,GAAGC,IAAI,CAACO,GAAG,CAACL,OAAO,CAAC,GAAGF,IAAI,CAACO,GAAG,CAACH,QAAQ,CAAC;IAC7G,IAAIC,IAAI,GAAG,CAAC,EAAE;MACbA,IAAI,GAAG,CAAC;IACT;IACAA,IAAI,GAAGL,IAAI,CAACQ,IAAI,CAACH,IAAI,CAAC;IACtBA,IAAI,GAAGA,IAAI,GAAG,GAAG,GAACL,IAAI,CAACC,EAAE;IACzBI,IAAI,GAAGA,IAAI,GAAG,EAAE,GAAG,MAAM;IACzB,OAAOA,IAAI;EACZ;AACD;;AAEA;AACA;AACA;;AAGA,eAAepB,2BAA2B"},"metadata":{},"sourceType":"module","externalDependencies":[]}