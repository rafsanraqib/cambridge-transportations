{"ast":null,"code":"var _jsxFileName = \"/Users/rafsanraqib/Documents/Cambridge Transportations/client/src/App.js\",\n  _s = $RefreshSig$();\n/**\n * @author Ahmed Rafsan Raqib\n * This is the main module where the Application is initiated.\n */\nimport \"./App.css\";\nimport DriverSearchForm from \"./Components/DriverSearchForm\";\nimport React from \"react\";\nimport ApplicationFooter from \"./Components/ApplicationFooter\";\nimport ListDrivers from \"./Components/ListDrivers\";\nimport { Routes, Route } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport determineLatLongFromAddress from \"../Geolocation/locationServices\";\nimport { determineDistanceBetweenDriverPatient } from \"../Geolocation/locationServices\";\nimport { useDispatch } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [patientInfo, setPatientName] = React.useState(null);\n  const [patientPickupAddress, setPatientPickupAddress] = React.useState(null);\n  const [patientPickupTime, setPatientPickupTime] = React.useState(null);\n  const [patientNotes, setPatientNotes] = React.useState(null);\n  const navigate = useNavigate();\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const {\n      lat,\n      lng\n    } = await determineLatLongFromAddress(patientPickupAddress);\n    var optimumDriverList = [];\n    driversList.forEach(function (driver) {\n      const lat1 = driver.latitude;\n      const lng1 = driver.longitude;\n\n      //Calculate distance between Driver and Patient\n      var distance = determineDistanceBetweenDriverPatient(lat, lng, lat1, lng1);\n      const driverData = {\n        id: driver.driverID,\n        driverName: driver.name,\n        vehicleId: driver.vehicleId,\n        distanceFromPatient: distance.toFixed(1)\n      };\n      optimumDriverList.push(driverData);\n    });\n\n    // Sorting list to display nearest Driver first\n    optimumDriverList.sort(function (a, b) {\n      return a.distanceFromPatient - b.distanceFromPatient;\n    });\n\n    // Sending data to redux store\n    dispatch({\n      type: \"SETPATIENTDATA\",\n      payload: {\n        id: patientInfo,\n        patientPickupAddress,\n        patientPickupTime,\n        patientNotes,\n        optimumDriverList\n      }\n    });\n    navigate(\"/listDrivers\");\n  };\n  const optimumDriversList = useSelector(patientData => patientData.optimumDriversList);\n  const patientPickupInfo = useSelector(patientData => patientData);\n  const driversList = [];\n\n  //Method that sends the email to the driver\n  const sendEmailToDrivers = selectedDriverData => {\n    const email = createEmailContent(selectedDriverData);\n    console.log(email);\n  };\n\n  //Method that creates the email\n  const createEmailContent = data => {\n    const driver = driversList.find(selectedDriverData => selectedDriverData.driverID === data.id);\n    const heading = \"======================\\n\" + \"  Pickup Information\\n\" + \"======================\\n\";\n    const subject = \"Patient Pickup for \" + driver.name + \"\\n\";\n    const body = \"Patient Name: \" + patientPickupInfo.patientName + \"\\nPickup Address: \" + patientPickupInfo.pickupAddress + \"\\nPickup Time: \" + patientPickupInfo.pickupTime + \"\\nPickup Notes: \" + patientPickupInfo.pickupNotes;\n    return {\n      emailId: driver.email,\n      heading: heading,\n      subject: subject,\n      body: body\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(DriverSearchForm, {\n            onButtonClick: this.handleSubmit,\n            label1: \"Patient Name\",\n            label1Placeholder: \"Example, Firstname M Lastname..\",\n            label1OnChange: this.state.setPatientName,\n            label2: \"Pickup Address\",\n            label2Placeholder: \"Apt no., Street, City, Zip, State\",\n            label2OnChange: this.state.setPatientPickupAddress,\n            label3: \"Pickup Time\",\n            label3Placeholder: \"Example, 11:05 AM..\",\n            label3OnChange: this.state.setPatientPickupTime,\n            label4: \"Pickup Notes\",\n            label4Placeholder: \"Patient Notes..\",\n            label4OnChange: this.state.setPatientNotes\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this),\n          exact: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/listDrivers\",\n          element: /*#__PURE__*/_jsxDEV(ListDrivers, {\n            listToRender: optimumDriversList,\n            initiateClickEvent: sendEmailToDrivers\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          component: Error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ApplicationFooter, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"UayeLzsnwDigZXw0tWlQmo79HaE=\", false, function () {\n  return [useNavigate, useSelector, useSelector];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["DriverSearchForm","React","ApplicationFooter","ListDrivers","Routes","Route","useSelector","useNavigate","determineLatLongFromAddress","determineDistanceBetweenDriverPatient","useDispatch","jsxDEV","_jsxDEV","App","_s","patientInfo","setPatientName","useState","patientPickupAddress","setPatientPickupAddress","patientPickupTime","setPatientPickupTime","patientNotes","setPatientNotes","navigate","handleSubmit","e","preventDefault","lat","lng","optimumDriverList","driversList","forEach","driver","lat1","latitude","lng1","longitude","distance","driverData","id","driverID","driverName","name","vehicleId","distanceFromPatient","toFixed","push","sort","a","b","dispatch","type","payload","optimumDriversList","patientData","patientPickupInfo","sendEmailToDrivers","selectedDriverData","email","createEmailContent","console","log","data","find","heading","subject","body","patientName","pickupAddress","pickupTime","pickupNotes","emailId","className","children","path","element","onButtonClick","label1","label1Placeholder","label1OnChange","state","label2","label2Placeholder","label2OnChange","label3","label3Placeholder","label3OnChange","label4","label4Placeholder","label4OnChange","fileName","_jsxFileName","lineNumber","columnNumber","exact","listToRender","initiateClickEvent","component","Error","_c","$RefreshReg$"],"sources":["/Users/rafsanraqib/Documents/Cambridge Transportations/client/src/App.js"],"sourcesContent":["/**\n * @author Ahmed Rafsan Raqib\n * This is the main module where the Application is initiated.\n */\nimport \"./App.css\";\nimport DriverSearchForm from \"./Components/DriverSearchForm\";\nimport React from \"react\";\nimport ApplicationFooter from \"./Components/ApplicationFooter\";\nimport ListDrivers from \"./Components/ListDrivers\";\nimport { Routes, Route } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport determineLatLongFromAddress from \"../Geolocation/locationServices\";\nimport { determineDistanceBetweenDriverPatient } from \"../Geolocation/locationServices\";\nimport { useDispatch } from \"react-redux\";\n\nfunction App() {\n  const [patientInfo, setPatientName] = React.useState(null);\n  const [patientPickupAddress, setPatientPickupAddress] = React.useState(null);\n  const [patientPickupTime, setPatientPickupTime] = React.useState(null);\n  const [patientNotes, setPatientNotes] = React.useState(null);\n\n  const navigate = useNavigate();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const { lat, lng } = await determineLatLongFromAddress(\n      patientPickupAddress\n    );\n    var optimumDriverList = [];\n    driversList.forEach(function (driver) {\n      const lat1 = driver.latitude;\n      const lng1 = driver.longitude;\n\n      //Calculate distance between Driver and Patient\n      var distance = determineDistanceBetweenDriverPatient(\n        lat,\n        lng,\n        lat1,\n        lng1\n      );\n      const driverData = {\n        id: driver.driverID,\n        driverName: driver.name,\n        vehicleId: driver.vehicleId,\n        distanceFromPatient: distance.toFixed(1),\n      };\n\n      optimumDriverList.push(driverData);\n    });\n\n    // Sorting list to display nearest Driver first\n    optimumDriverList.sort(function (a, b) {\n      return a.distanceFromPatient - b.distanceFromPatient;\n    });\n\n    // Sending data to redux store\n    dispatch({\n      type: \"SETPATIENTDATA\",\n      payload: {\n        id: patientInfo,\n        patientPickupAddress,\n        patientPickupTime,\n        patientNotes,\n        optimumDriverList,\n      },\n    });\n\n    navigate(\"/listDrivers\");\n  };\n\n  const optimumDriversList = useSelector(\n    (patientData) => patientData.optimumDriversList\n  );\n\n  const patientPickupInfo = useSelector((patientData) => patientData);\n  const driversList = [];\n\n  //Method that sends the email to the driver\n  const sendEmailToDrivers = (selectedDriverData) => {\n    const email = createEmailContent(selectedDriverData);\n\n    console.log(email);\n  };\n\n  //Method that creates the email\n  const createEmailContent = (data) => {\n    const driver = driversList.find(\n      (selectedDriverData) => selectedDriverData.driverID === data.id\n    );\n\n    const heading =\n      \"======================\\n\" +\n      \"  Pickup Information\\n\" +\n      \"======================\\n\";\n    const subject = \"Patient Pickup for \" + driver.name + \"\\n\";\n    const body =\n      \"Patient Name: \" +\n      patientPickupInfo.patientName +\n      \"\\nPickup Address: \" +\n      patientPickupInfo.pickupAddress +\n      \"\\nPickup Time: \" +\n      patientPickupInfo.pickupTime +\n      \"\\nPickup Notes: \" +\n      patientPickupInfo.pickupNotes;\n\n    return {\n      emailId: driver.email,\n      heading: heading,\n      subject: subject,\n      body: body,\n    };\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"App\">\n        <Routes>\n          <Route\n            path=\"/\"\n            element={\n              <DriverSearchForm\n                onButtonClick={this.handleSubmit}\n                label1={\"Patient Name\"}\n                label1Placeholder={\"Example, Firstname M Lastname..\"}\n                label1OnChange={this.state.setPatientName}\n                label2={\"Pickup Address\"}\n                label2Placeholder={\"Apt no., Street, City, Zip, State\"}\n                label2OnChange={this.state.setPatientPickupAddress}\n                label3={\"Pickup Time\"}\n                label3Placeholder={\"Example, 11:05 AM..\"}\n                label3OnChange={this.state.setPatientPickupTime}\n                label4={\"Pickup Notes\"}\n                label4Placeholder={\"Patient Notes..\"}\n                label4OnChange={this.state.setPatientNotes}\n              />\n            }\n            exact\n          />\n          <Route\n            path=\"/listDrivers\"\n            element={\n              <ListDrivers\n                listToRender={optimumDriversList}\n                initiateClickEvent={sendEmailToDrivers}\n              />\n            }\n          />\n          <Route component={Error}></Route>\n        </Routes>\n      </div>\n\n      <div>\n        <ApplicationFooter />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}