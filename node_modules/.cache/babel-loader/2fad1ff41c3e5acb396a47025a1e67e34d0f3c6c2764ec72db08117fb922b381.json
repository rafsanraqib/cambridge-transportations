{"ast":null,"code":"var _jsxFileName = \"/Users/rafsanraqib/Documents/Cambridge Transportations/location-draft/src/Components/ListDrivers.js\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport { determineDistanceBetweenDriverPatient } from '../Geolocation/locationServices';\nimport { useSelector } from 'react-redux';\nimport determineLatLongFromAddress from '../Geolocation/locationServices';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CheckboxListSecondary() {\n  _s();\n  const address = useSelector(patientData => patientData.pickupAddress);\n  const [driversList, setDriversList] = React.useState([{\n    name: \"Ahmed Rafsan Raqib\",\n    driverID: \"raf97\",\n    location: \"2302 130th Ave NW, Coon Rapids, MN, 55448, USA\",\n    vehicleId: 245,\n    latitude: 45.206436,\n    longitude: -93.324840\n  }, {\n    name: \"Ahmed Ispahan Raqib\",\n    driverID: \"isp05\",\n    location: \"1282 Concordia Ave, Saint Paul, MN, 55104, USA\",\n    vehicleId: 500,\n    latitude: 44.9505630,\n    longitude: -93.1552700\n  }, {\n    name: \"Labiba Nayeem Khan\",\n    driverId: \"lab200\",\n    location: \"300 Washington Ave SE, Minneapolis, MN,55455, USA\",\n    vehicleId: 600,\n    latitude: 44.9729,\n    longitude: -93.2833\n  }]);\n  const calculateNearestDriver = async () => {\n    const {\n      lat,\n      lng\n    } = await determineLatLongFromAddress(address);\n    var optimumDriverList = [];\n    driversList.forEach(function (driver) {\n      const lat1 = driver.latitude;\n      const lng1 = driver.longitude;\n      var distance = determineDistanceBetweenDriverPatient(lat, lng, lat1, lng1);\n      const driverData = [{\n        id: driver.driverID,\n        distanceFromPatient: distance\n      }];\n      optimumDriverList.push(driverData);\n    });\n    optimumDriverList.sort(function (a, b) {\n      console.log(a);\n      return a.distanceFromPatient - b.distanceFromPatient;\n    });\n    console.log(optimumDriverList);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onLoad: calculateNearestDriver(),\n    children: /*#__PURE__*/_jsxDEV(List, {\n      dense: true,\n      sx: {\n        width: '100%',\n        maxWidth: 360\n      },\n      children: driversList.map(value => {\n        const labelId = `checkbox-list-secondary-label-${value}`;\n        return /*#__PURE__*/_jsxDEV(ListItem, {\n          children: /*#__PURE__*/_jsxDEV(ListItemButton, {\n            children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n              children: /*#__PURE__*/_jsxDEV(Avatar, {\n                src: `/static/images/avatar/${value + 1}.jpg`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n              id: labelId,\n              primary: value.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)\n        }, value, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 3\n  }, this);\n}\n_s(CheckboxListSecondary, \"S3Tj4B+fr3zcb4zK15/8HCo3g7o=\", false, function () {\n  return [useSelector];\n});\n_c = CheckboxListSecondary;\nvar _c;\n$RefreshReg$(_c, \"CheckboxListSecondary\");","map":{"version":3,"names":["React","List","ListItem","ListItemButton","ListItemText","ListItemAvatar","Avatar","determineDistanceBetweenDriverPatient","useSelector","determineLatLongFromAddress","jsxDEV","_jsxDEV","CheckboxListSecondary","_s","address","patientData","pickupAddress","driversList","setDriversList","useState","name","driverID","location","vehicleId","latitude","longitude","driverId","calculateNearestDriver","lat","lng","optimumDriverList","forEach","driver","lat1","lng1","distance","driverData","id","distanceFromPatient","push","sort","a","b","console","log","onLoad","children","dense","sx","width","maxWidth","map","value","labelId","src","fileName","_jsxFileName","lineNumber","columnNumber","primary","_c","$RefreshReg$"],"sources":["/Users/rafsanraqib/Documents/Cambridge Transportations/location-draft/src/Components/ListDrivers.js"],"sourcesContent":["\nimport * as React from 'react';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport {determineDistanceBetweenDriverPatient} from '../Geolocation/locationServices';\nimport { useSelector } from 'react-redux'\nimport determineLatLongFromAddress from '../Geolocation/locationServices'\n\nexport default function CheckboxListSecondary() {\n\n  const address = useSelector(\n    (patientData => patientData.pickupAddress));\n\n  const [driversList, setDriversList] = React.useState([\n    {\n      name: \"Ahmed Rafsan Raqib\",\n      driverID: \"raf97\",\n      location: \"2302 130th Ave NW, Coon Rapids, MN, 55448, USA\",\n      vehicleId: 245,\n      latitude: 45.206436,\n      longitude:-93.324840\n    }, \n    {\n      name: \"Ahmed Ispahan Raqib\",\n      driverID: \"isp05\",\n      location: \"1282 Concordia Ave, Saint Paul, MN, 55104, USA\",\n      vehicleId: 500,\n      latitude: 44.9505630,\n      longitude: -93.1552700\n    }, \n    {\n      name: \"Labiba Nayeem Khan\",\n      driverId: \"lab200\",\n      location: \"300 Washington Ave SE, Minneapolis, MN,55455, USA\",\n      vehicleId:600,\n      latitude: 44.9729,\n      longitude: -93.2833\n    }\n\n  ])\n\n  const calculateNearestDriver = async() => {\n    const {lat, lng} = await determineLatLongFromAddress(address);\n    var optimumDriverList = [];\n    driversList.forEach(function (driver) {\n      const lat1 = driver.latitude;\n      const lng1 = driver.longitude;\n\n      var distance = determineDistanceBetweenDriverPatient(lat, lng, lat1, lng1);\n      const driverData = [{id: driver.driverID, distanceFromPatient: distance}];\n      optimumDriverList.push(driverData);\n    });\n    optimumDriverList.sort(function(a,b){\n      console.log(a);\n      return a.distanceFromPatient - b.distanceFromPatient\n    });\n\n    console.log(optimumDriverList);\n  }\n\n  return (\n  <div onLoad={calculateNearestDriver()}>\n    <List dense sx={{ width: '100%', maxWidth: 360}}>\n      {driversList.map((value) => {\n        const labelId = `checkbox-list-secondary-label-${value}`;\n        return (\n          <ListItem key={value}>\n            <ListItemButton>\n              <ListItemAvatar>\n                <Avatar\n                  src={`/static/images/avatar/${value + 1}.jpg`}\n                />\n              </ListItemAvatar>\n              <ListItemText id={labelId} primary={value.name} />\n            </ListItemButton>\n          </ListItem>\n        );\n      })}\n    </List>\n  </div>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}