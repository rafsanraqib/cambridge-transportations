{"ast":null,"code":"var _jsxFileName = \"/Users/rafsanraqib/Documents/Cambridge Transportations/client/src/Components/DriverSearchForm.js\",\n  _s = $RefreshSig$();\n/**\n * @author Ahmed Rafsan Raqib\n * This component renders the Driver Search form where the user inputs the\n * Driver name, pickup address, pickup time and any notes the patient might have left.\n * Once all the information is entered and the Search button is clicked the system\n * Calculates the nearest driver by comparing patient location with the Driver's current\n * Location and creates an Array with the nearest Drivers available. Redux Store gets\n * Updated with the information.\n */\n\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport determineLatLongFromAddress from \"../Geolocation/locationServices\";\nimport { determineDistanceBetweenDriverPatient } from \"../Geolocation/locationServices\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DriverSearchByLocation(props) {\n  _s();\n  const [patientInfo, setPatientName] = React.useState(null);\n  const [patientPickupAddress, setPatientPickupAddress] = React.useState(null);\n  const [patientPickupTime, setPatientPickupTime] = React.useState(null);\n  const [patientNotes, setPatientNotes] = React.useState(null);\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const driversList = [];\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const {\n      lat,\n      lng\n    } = await determineLatLongFromAddress(patientPickupAddress);\n    var optimumDriverList = [];\n    driversList.forEach(function (driver) {\n      const lat1 = driver.latitude;\n      const lng1 = driver.longitude;\n\n      //Calculate distance between Driver and Patient\n      var distance = determineDistanceBetweenDriverPatient(lat, lng, lat1, lng1);\n      const driverData = {\n        id: driver.driverID,\n        driverName: driver.name,\n        vehicleId: driver.vehicleId,\n        distanceFromPatient: distance.toFixed(1)\n      };\n      optimumDriverList.push(driverData);\n    });\n\n    // Sorting list to display nearest Driver first\n    optimumDriverList.sort(function (a, b) {\n      return a.distanceFromPatient - b.distanceFromPatient;\n    });\n\n    // Sending data to redux store\n    dispatch({\n      type: \"SETPATIENTDATA\",\n      payload: {\n        id: patientInfo,\n        patientPickupAddress,\n        patientPickupTime,\n        patientNotes,\n        optimumDriverList\n      }\n    });\n    navigate(\"/listDrivers\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"auth-form-div\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"driver-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: props.label1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setPatientName(e.target.value),\n        placeholder: props.label1Placeholder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: props.label2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setPatientPickupAddress(e.target.value),\n        placeholder: props.label2Placeholder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: props.label3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setPatientPickupTime(e.target.value),\n        placeholder: props.label3Placeholder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: props.label4\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setPatientNotes(e.target.value),\n        placeholder: props.label4Placeholder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"driver-button\",\n        type: \"submit\",\n        children: \"Drivers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(DriverSearchByLocation, \"GwQ4pTvOLZmGbmQ4jPIBl/tBwAw=\", false, function () {\n  return [useNavigate, useDispatch];\n});\n_c = DriverSearchByLocation;\nvar _c;\n$RefreshReg$(_c, \"DriverSearchByLocation\");","map":{"version":3,"names":["React","useDispatch","useNavigate","determineLatLongFromAddress","determineDistanceBetweenDriverPatient","jsxDEV","_jsxDEV","DriverSearchByLocation","props","_s","patientInfo","setPatientName","useState","patientPickupAddress","setPatientPickupAddress","patientPickupTime","setPatientPickupTime","patientNotes","setPatientNotes","navigate","dispatch","driversList","handleSubmit","e","preventDefault","lat","lng","optimumDriverList","forEach","driver","lat1","latitude","lng1","longitude","distance","driverData","id","driverID","driverName","name","vehicleId","distanceFromPatient","toFixed","push","sort","a","b","type","payload","className","children","onSubmit","label1","fileName","_jsxFileName","lineNumber","columnNumber","onChange","target","value","placeholder","label1Placeholder","label2","label2Placeholder","label3","label3Placeholder","label4","label4Placeholder","_c","$RefreshReg$"],"sources":["/Users/rafsanraqib/Documents/Cambridge Transportations/client/src/Components/DriverSearchForm.js"],"sourcesContent":["/**\n * @author Ahmed Rafsan Raqib\n * This component renders the Driver Search form where the user inputs the\n * Driver name, pickup address, pickup time and any notes the patient might have left.\n * Once all the information is entered and the Search button is clicked the system\n * Calculates the nearest driver by comparing patient location with the Driver's current\n * Location and creates an Array with the nearest Drivers available. Redux Store gets\n * Updated with the information.\n */\n\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport determineLatLongFromAddress from \"../Geolocation/locationServices\";\nimport { determineDistanceBetweenDriverPatient } from \"../Geolocation/locationServices\";\n\nexport default function DriverSearchByLocation(props) {\n  const [patientInfo, setPatientName] = React.useState(null);\n  const [patientPickupAddress, setPatientPickupAddress] = React.useState(null);\n  const [patientPickupTime, setPatientPickupTime] = React.useState(null);\n  const [patientNotes, setPatientNotes] = React.useState(null);\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const driversList = [];\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const { lat, lng } = await determineLatLongFromAddress(\n      patientPickupAddress\n    );\n    var optimumDriverList = [];\n    driversList.forEach(function (driver) {\n      const lat1 = driver.latitude;\n      const lng1 = driver.longitude;\n\n      //Calculate distance between Driver and Patient\n      var distance = determineDistanceBetweenDriverPatient(\n        lat,\n        lng,\n        lat1,\n        lng1\n      );\n      const driverData = {\n        id: driver.driverID,\n        driverName: driver.name,\n        vehicleId: driver.vehicleId,\n        distanceFromPatient: distance.toFixed(1),\n      };\n\n      optimumDriverList.push(driverData);\n    });\n\n    // Sorting list to display nearest Driver first\n    optimumDriverList.sort(function (a, b) {\n      return a.distanceFromPatient - b.distanceFromPatient;\n    });\n\n    // Sending data to redux store\n    dispatch({\n      type: \"SETPATIENTDATA\",\n      payload: {\n        id: patientInfo,\n        patientPickupAddress,\n        patientPickupTime,\n        patientNotes,\n        optimumDriverList,\n      },\n    });\n\n    navigate(\"/listDrivers\");\n  };\n\n  return (\n    <div className=\"auth-form-div\">\n      <form onSubmit={handleSubmit} className=\"driver-form\">\n        <label>{props.label1}</label>\n        <input\n          onChange={(e) => setPatientName(e.target.value)}\n          placeholder={props.label1Placeholder}\n        ></input>\n\n        <label>{props.label2}</label>\n        <input\n          onChange={(e) => setPatientPickupAddress(e.target.value)}\n          placeholder={props.label2Placeholder}\n        ></input>\n\n        <label>{props.label3}</label>\n        <input\n          onChange={(e) => setPatientPickupTime(e.target.value)}\n          placeholder={props.label3Placeholder}\n        ></input>\n\n        <label>{props.label4}</label>\n        <input\n          onChange={(e) => setPatientNotes(e.target.value)}\n          placeholder={props.label4Placeholder}\n        ></input>\n\n        <button className=\"driver-button\" type=\"submit\">\n          Drivers\n        </button>\n      </form>\n    </div>\n  );\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,2BAA2B,MAAM,iCAAiC;AACzE,SAASC,qCAAqC,QAAQ,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExF,eAAe,SAASC,sBAAsBA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACpD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,KAAK,CAACY,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACC,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGd,KAAK,CAACY,QAAQ,CAAC,IAAI,CAAC;EAC5E,MAAM,CAACG,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGhB,KAAK,CAACY,QAAQ,CAAC,IAAI,CAAC;EACtE,MAAM,CAACK,YAAY,EAAEC,eAAe,CAAC,GAAGlB,KAAK,CAACY,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAMO,QAAQ,GAAGjB,WAAW,EAAE;EAC9B,MAAMkB,QAAQ,GAAGnB,WAAW,EAAE;EAE9B,MAAMoB,WAAW,GAAG,EAAE;EAEtB,MAAMC,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,EAAE;IAElB,MAAM;MAAEC,GAAG;MAAEC;IAAI,CAAC,GAAG,MAAMvB,2BAA2B,CACpDU,oBAAoB,CACrB;IACD,IAAIc,iBAAiB,GAAG,EAAE;IAC1BN,WAAW,CAACO,OAAO,CAAC,UAAUC,MAAM,EAAE;MACpC,MAAMC,IAAI,GAAGD,MAAM,CAACE,QAAQ;MAC5B,MAAMC,IAAI,GAAGH,MAAM,CAACI,SAAS;;MAE7B;MACA,IAAIC,QAAQ,GAAG9B,qCAAqC,CAClDqB,GAAG,EACHC,GAAG,EACHI,IAAI,EACJE,IAAI,CACL;MACD,MAAMG,UAAU,GAAG;QACjBC,EAAE,EAAEP,MAAM,CAACQ,QAAQ;QACnBC,UAAU,EAAET,MAAM,CAACU,IAAI;QACvBC,SAAS,EAAEX,MAAM,CAACW,SAAS;QAC3BC,mBAAmB,EAAEP,QAAQ,CAACQ,OAAO,CAAC,CAAC;MACzC,CAAC;MAEDf,iBAAiB,CAACgB,IAAI,CAACR,UAAU,CAAC;IACpC,CAAC,CAAC;;IAEF;IACAR,iBAAiB,CAACiB,IAAI,CAAC,UAAUC,CAAC,EAAEC,CAAC,EAAE;MACrC,OAAOD,CAAC,CAACJ,mBAAmB,GAAGK,CAAC,CAACL,mBAAmB;IACtD,CAAC,CAAC;;IAEF;IACArB,QAAQ,CAAC;MACP2B,IAAI,EAAE,gBAAgB;MACtBC,OAAO,EAAE;QACPZ,EAAE,EAAE1B,WAAW;QACfG,oBAAoB;QACpBE,iBAAiB;QACjBE,YAAY;QACZU;MACF;IACF,CAAC,CAAC;IAEFR,QAAQ,CAAC,cAAc,CAAC;EAC1B,CAAC;EAED,oBACEb,OAAA;IAAK2C,SAAS,EAAC,eAAe;IAAAC,QAAA,eAC5B5C,OAAA;MAAM6C,QAAQ,EAAE7B,YAAa;MAAC2B,SAAS,EAAC,aAAa;MAAAC,QAAA,gBACnD5C,OAAA;QAAA4C,QAAA,EAAQ1C,KAAK,CAAC4C;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS,eAC7BlD,OAAA;QACEmD,QAAQ,EAAGlC,CAAC,IAAKZ,cAAc,CAACY,CAAC,CAACmC,MAAM,CAACC,KAAK,CAAE;QAChDC,WAAW,EAAEpD,KAAK,CAACqD;MAAkB;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC9B,eAETlD,OAAA;QAAA4C,QAAA,EAAQ1C,KAAK,CAACsD;MAAM;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS,eAC7BlD,OAAA;QACEmD,QAAQ,EAAGlC,CAAC,IAAKT,uBAAuB,CAACS,CAAC,CAACmC,MAAM,CAACC,KAAK,CAAE;QACzDC,WAAW,EAAEpD,KAAK,CAACuD;MAAkB;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC9B,eAETlD,OAAA;QAAA4C,QAAA,EAAQ1C,KAAK,CAACwD;MAAM;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS,eAC7BlD,OAAA;QACEmD,QAAQ,EAAGlC,CAAC,IAAKP,oBAAoB,CAACO,CAAC,CAACmC,MAAM,CAACC,KAAK,CAAE;QACtDC,WAAW,EAAEpD,KAAK,CAACyD;MAAkB;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC9B,eAETlD,OAAA;QAAA4C,QAAA,EAAQ1C,KAAK,CAAC0D;MAAM;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS,eAC7BlD,OAAA;QACEmD,QAAQ,EAAGlC,CAAC,IAAKL,eAAe,CAACK,CAAC,CAACmC,MAAM,CAACC,KAAK,CAAE;QACjDC,WAAW,EAAEpD,KAAK,CAAC2D;MAAkB;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC9B,eAETlD,OAAA;QAAQ2C,SAAS,EAAC,eAAe;QAACF,IAAI,EAAC,QAAQ;QAAAG,QAAA,EAAC;MAEhD;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACJ;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACH;AAEV;AAAC/C,EAAA,CA3FuBF,sBAAsB;EAAA,QAK3BL,WAAW,EACXD,WAAW;AAAA;AAAAmE,EAAA,GANN7D,sBAAsB;AAAA,IAAA6D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}