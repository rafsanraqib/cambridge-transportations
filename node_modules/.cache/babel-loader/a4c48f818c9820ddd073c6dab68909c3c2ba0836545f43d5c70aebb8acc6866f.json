{"ast":null,"code":"var _jsxFileName = \"/Users/rafsanraqib/Documents/Cambridge Transportations/location-draft/src/Components/ListDrivers.js\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport { determineDistanceBetweenDriverPatient } from '../Geolocation/locationServices';\nimport { useSelector } from 'react-redux';\nimport determineLatLongFromAddress from '../Geolocation/locationServices';\nimport driversList from '../Model/driverModel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CheckboxListSecondary() {\n  _s();\n  const address = useSelector(patientData => patientData.pickupAddress);\n  const [displayDrivers, setDisplayDrivers] = React.useState(null);\n  const calculateNearestDriver = async () => {\n    console.log(\"calling....\");\n    const {\n      lat,\n      lng\n    } = await determineLatLongFromAddress(address);\n    var optimumDriverList = [];\n    driversList.forEach(function (driver) {\n      const lat1 = driver.latitude;\n      const lng1 = driver.longitude;\n      var distance = determineDistanceBetweenDriverPatient(lat, lng, lat1, lng1);\n      const driverData = {\n        id: driver.driverID,\n        driverName: driver.name,\n        vehicleId: driver.vehicleId,\n        distanceFromPatient: distance\n      };\n      optimumDriverList.push(driverData);\n    });\n    optimumDriverList.sort(function (a, b) {\n      return a.distanceFromPatient - b.distanceFromPatient;\n    });\n    setDisplayDrivers(optimumDriverList);\n  };\n  React.useEffect(() => {\n    calculateNearestDriver();\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(List, {\n      dense: true,\n      sx: {\n        width: '100%',\n        maxWidth: 360\n      },\n      children: driversList.map(value => {\n        const labelId = `checkbox-list-secondary-label-${value.driverID}`;\n        return /*#__PURE__*/_jsxDEV(ListItem, {\n          children: /*#__PURE__*/_jsxDEV(ListItemButton, {\n            children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n              children: /*#__PURE__*/_jsxDEV(Avatar, {\n                src: `/static/images/avatar/${value + 1}.jpg`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n              id: labelId,\n              primary: value.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this)\n        }, value.vehicleId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 3\n  }, this);\n}\n_s(CheckboxListSecondary, \"w/b0jO1+DZ5QmzQDEEM1tQIj5zQ=\", false, function () {\n  return [useSelector];\n});\n_c = CheckboxListSecondary;\nvar _c;\n$RefreshReg$(_c, \"CheckboxListSecondary\");","map":{"version":3,"names":["React","List","ListItem","ListItemButton","ListItemText","ListItemAvatar","Avatar","determineDistanceBetweenDriverPatient","useSelector","determineLatLongFromAddress","driversList","jsxDEV","_jsxDEV","CheckboxListSecondary","_s","address","patientData","pickupAddress","displayDrivers","setDisplayDrivers","useState","calculateNearestDriver","console","log","lat","lng","optimumDriverList","forEach","driver","lat1","latitude","lng1","longitude","distance","driverData","id","driverID","driverName","name","vehicleId","distanceFromPatient","push","sort","a","b","useEffect","children","dense","sx","width","maxWidth","map","value","labelId","src","fileName","_jsxFileName","lineNumber","columnNumber","primary","_c","$RefreshReg$"],"sources":["/Users/rafsanraqib/Documents/Cambridge Transportations/location-draft/src/Components/ListDrivers.js"],"sourcesContent":["\nimport * as React from 'react';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport {determineDistanceBetweenDriverPatient} from '../Geolocation/locationServices';\nimport { useSelector } from 'react-redux'\nimport determineLatLongFromAddress from '../Geolocation/locationServices'\nimport driversList from '../Model/driverModel';\n\nexport default function CheckboxListSecondary() {\n\n  const address = useSelector(\n    (patientData => patientData.pickupAddress));\n\n  const [displayDrivers, setDisplayDrivers] = React.useState(null);\n\n  const calculateNearestDriver = async() => {\n    console.log(\"calling....\");\n    const {lat, lng} = await determineLatLongFromAddress(address);\n    var optimumDriverList = [];\n    driversList.forEach(function (driver) {\n      const lat1 = driver.latitude;\n      const lng1 = driver.longitude;\n\n      var distance = determineDistanceBetweenDriverPatient(lat, lng, lat1, lng1);\n      const driverData = {id: driver.driverID, driverName: driver.name, vehicleId: driver.vehicleId, \n        distanceFromPatient: distance};\n\n      optimumDriverList.push(driverData);\n    });\n    optimumDriverList.sort(function(a,b){\n      return a.distanceFromPatient - b.distanceFromPatient\n    });\n\n    setDisplayDrivers(optimumDriverList);\n\n\n\n  };\n\n  React.useEffect(() => {\n    calculateNearestDriver();\n  })\n\n  return (\n  <div>\n    <List dense sx={{ width: '100%', maxWidth: 360}}>\n      {driversList.map((value) => {\n        const labelId = `checkbox-list-secondary-label-${value.driverID}`;\n        return (\n          <ListItem key={value.vehicleId}>\n            <ListItemButton>\n              <ListItemAvatar>\n                <Avatar\n                  src={`/static/images/avatar/${value + 1}.jpg`}\n                />\n              </ListItemAvatar>\n              <ListItemText id={labelId} primary={value.name} />\n            </ListItemButton>\n          </ListItem>\n        );\n      })}\n    </List>\n  </div>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}