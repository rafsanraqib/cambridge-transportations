{"ast":null,"code":"var _jsxFileName = \"/Users/rafsanraqib/Documents/Cambridge Transportations/client/src/App.js\",\n  _s = $RefreshSig$();\n/**\n * @author Ahmed Rafsan Raqib\n * This is the main module where the Application is initiated.\n */\nimport \"./App.css\";\nimport DriverSearchForm from \"./Components/DriverSearchForm\";\nimport React from \"react\";\nimport ApplicationFooter from \"./Components/ApplicationFooter\";\nimport ListDrivers from \"./Components/ListDrivers\";\nimport { Routes, Route } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport determineLatLongFromAddress from \"./Geolocation/locationServices\";\nimport { determineDistanceBetweenDriverPatient } from \"./Geolocation/locationServices\";\nimport { useDispatch } from \"react-redux\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [patientInfo, setPatientName] = React.useState(null);\n  const [patientPickupAddress, setPatientPickupAddress] = React.useState(null);\n  const [patientPickupTime, setPatientPickupTime] = React.useState(null);\n  const [patientNotes, setPatientNotes] = React.useState(null);\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  var driversList;\n  const optimumDriversList = useSelector(patientData => patientData.optimumDriversList);\n  const patientPickupInfo = useSelector(patientData => patientData);\n\n  // Submit function that initiate a cascade of other functions to access data from\n  // database and calculate optimum drivers for the patient\n  const handleSubmit = async e => {\n    e.preventDefault();\n    await getAllDrivers();\n    // Determine lattitude and longitude from address\n    const {\n      lat,\n      lng\n    } = await determineLatLongFromAddress(patientPickupAddress);\n    var optimumDriverList = [];\n    driversList.forEach(function (driver) {\n      const lat1 = driver.latitude;\n      const lng1 = driver.longitude;\n\n      //Calculate distance between Driver and Patient\n      var distance = determineDistanceBetweenDriverPatient(lat, lng, lat1, lng1);\n      const driverData = {\n        id: driver.driverID,\n        driverName: driver.name,\n        vehicleId: driver.vehicleId,\n        distanceFromPatient: distance.toFixed(1)\n      };\n      optimumDriverList.push(driverData);\n    });\n\n    // Sorting list to display nearest Driver first\n    optimumDriverList.sort(function (a, b) {\n      return a.distanceFromPatient - b.distanceFromPatient;\n    });\n\n    // Sending data to redux store\n    dispatch({\n      type: \"SETPATIENTDATA\",\n      payload: {\n        id: patientInfo,\n        patientPickupAddress,\n        patientPickupTime,\n        patientNotes,\n        optimumDriverList\n      }\n    });\n    navigate(\"/listDrivers\");\n  };\n\n  // Contructs and executes an Axios API call to the backend. The backend recieves the request\n  // and queries the database for all driver records which is then send back as part of the\n  // response.\n  const getAllDrivers = async () => {\n    await axios.get(\"http://localhost:3001/getDrivers\").then(response => driversList = response.data.Drivers);\n  };\n\n  //Method that creates the email\n  const createPatientDataObject = data => {\n    const driver = driversList.find(selectedDriverData => selectedDriverData.driverID === data.id);\n    const patientData = {\n      patientName: patientPickupInfo.patientName,\n      patientAddress: patientPickupInfo.pickupAddress,\n      pickupTime: patientPickupInfo.pickupTime,\n      patientNotes: patientPickupInfo.pickupNotes,\n      assignedDriver: driver\n    };\n    return patientData;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(DriverSearchForm, {\n            onButtonClick: handleSubmit,\n            label1: \"Patient Name\",\n            label1Placeholder: \"Example, Firstname M Lastname..\",\n            label1OnChange: setPatientName,\n            label2: \"Pickup Address\",\n            label2Placeholder: \"Apt no., Street, City, Zip, State\",\n            label2OnChange: setPatientPickupAddress,\n            label3: \"Pickup Time\",\n            label3Placeholder: \"Example, 11:05 AM..\",\n            label3OnChange: setPatientPickupTime,\n            label4: \"Pickup Notes\",\n            label4Placeholder: \"Patient Notes..\",\n            label4OnChange: setPatientNotes,\n            buttonLabel: \"Drivers\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this),\n          exact: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/listDrivers\",\n          element: /*#__PURE__*/_jsxDEV(ListDrivers, {\n            listToRender: optimumDriversList,\n            initiateClickEvent: sendEmailToDrivers\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          component: Error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ApplicationFooter, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"qWdOMxJEWxdPeQBdWK/UeH8qX+Q=\", false, function () {\n  return [useNavigate, useDispatch, useSelector, useSelector];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["DriverSearchForm","React","ApplicationFooter","ListDrivers","Routes","Route","useSelector","useNavigate","determineLatLongFromAddress","determineDistanceBetweenDriverPatient","useDispatch","axios","jsxDEV","_jsxDEV","App","_s","patientInfo","setPatientName","useState","patientPickupAddress","setPatientPickupAddress","patientPickupTime","setPatientPickupTime","patientNotes","setPatientNotes","navigate","dispatch","driversList","optimumDriversList","patientData","patientPickupInfo","handleSubmit","e","preventDefault","getAllDrivers","lat","lng","optimumDriverList","forEach","driver","lat1","latitude","lng1","longitude","distance","driverData","id","driverID","driverName","name","vehicleId","distanceFromPatient","toFixed","push","sort","a","b","type","payload","get","then","response","data","Drivers","createPatientDataObject","find","selectedDriverData","patientName","patientAddress","pickupAddress","pickupTime","pickupNotes","assignedDriver","className","children","path","element","onButtonClick","label1","label1Placeholder","label1OnChange","label2","label2Placeholder","label2OnChange","label3","label3Placeholder","label3OnChange","label4","label4Placeholder","label4OnChange","buttonLabel","fileName","_jsxFileName","lineNumber","columnNumber","exact","listToRender","initiateClickEvent","sendEmailToDrivers","component","Error","_c","$RefreshReg$"],"sources":["/Users/rafsanraqib/Documents/Cambridge Transportations/client/src/App.js"],"sourcesContent":["/**\n * @author Ahmed Rafsan Raqib\n * This is the main module where the Application is initiated.\n */\nimport \"./App.css\";\nimport DriverSearchForm from \"./Components/DriverSearchForm\";\nimport React from \"react\";\nimport ApplicationFooter from \"./Components/ApplicationFooter\";\nimport ListDrivers from \"./Components/ListDrivers\";\nimport { Routes, Route } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport determineLatLongFromAddress from \"./Geolocation/locationServices\";\nimport { determineDistanceBetweenDriverPatient } from \"./Geolocation/locationServices\";\nimport { useDispatch } from \"react-redux\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [patientInfo, setPatientName] = React.useState(null);\n  const [patientPickupAddress, setPatientPickupAddress] = React.useState(null);\n  const [patientPickupTime, setPatientPickupTime] = React.useState(null);\n  const [patientNotes, setPatientNotes] = React.useState(null);\n\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  var driversList;\n  const optimumDriversList = useSelector(\n    (patientData) => patientData.optimumDriversList\n  );\n\n  const patientPickupInfo = useSelector((patientData) => patientData);\n\n  // Submit function that initiate a cascade of other functions to access data from\n  // database and calculate optimum drivers for the patient\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    await getAllDrivers();\n    // Determine lattitude and longitude from address\n    const { lat, lng } = await determineLatLongFromAddress(\n      patientPickupAddress\n    );\n    var optimumDriverList = [];\n    driversList.forEach(function (driver) {\n      const lat1 = driver.latitude;\n      const lng1 = driver.longitude;\n\n      //Calculate distance between Driver and Patient\n      var distance = determineDistanceBetweenDriverPatient(\n        lat,\n        lng,\n        lat1,\n        lng1\n      );\n      const driverData = {\n        id: driver.driverID,\n        driverName: driver.name,\n        vehicleId: driver.vehicleId,\n        distanceFromPatient: distance.toFixed(1),\n      };\n\n      optimumDriverList.push(driverData);\n    });\n\n    // Sorting list to display nearest Driver first\n    optimumDriverList.sort(function (a, b) {\n      return a.distanceFromPatient - b.distanceFromPatient;\n    });\n\n    // Sending data to redux store\n    dispatch({\n      type: \"SETPATIENTDATA\",\n      payload: {\n        id: patientInfo,\n        patientPickupAddress,\n        patientPickupTime,\n        patientNotes,\n        optimumDriverList,\n      },\n    });\n\n    navigate(\"/listDrivers\");\n  };\n\n  // Contructs and executes an Axios API call to the backend. The backend recieves the request\n  // and queries the database for all driver records which is then send back as part of the\n  // response.\n  const getAllDrivers = async () => {\n    await axios\n      .get(\"http://localhost:3001/getDrivers\")\n      .then((response) => (driversList = response.data.Drivers));\n  };\n\n  //Method that creates the email\n  const createPatientDataObject = (data) => {\n    const driver = driversList.find(\n      (selectedDriverData) => selectedDriverData.driverID === data.id\n    );\n\n    const patientData = {\n      patientName: patientPickupInfo.patientName,\n      patientAddress: patientPickupInfo.pickupAddress,\n      pickupTime: patientPickupInfo.pickupTime,\n      patientNotes: patientPickupInfo.pickupNotes,\n      assignedDriver: driver,\n    };\n\n    return patientData;\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"App\">\n        <Routes>\n          <Route\n            path=\"/\"\n            element={\n              <DriverSearchForm\n                onButtonClick={handleSubmit}\n                label1={\"Patient Name\"}\n                label1Placeholder={\"Example, Firstname M Lastname..\"}\n                label1OnChange={setPatientName}\n                label2={\"Pickup Address\"}\n                label2Placeholder={\"Apt no., Street, City, Zip, State\"}\n                label2OnChange={setPatientPickupAddress}\n                label3={\"Pickup Time\"}\n                label3Placeholder={\"Example, 11:05 AM..\"}\n                label3OnChange={setPatientPickupTime}\n                label4={\"Pickup Notes\"}\n                label4Placeholder={\"Patient Notes..\"}\n                label4OnChange={setPatientNotes}\n                buttonLabel={\"Drivers\"}\n              />\n            }\n            exact\n          />\n          <Route\n            path=\"/listDrivers\"\n            element={\n              <ListDrivers\n                listToRender={optimumDriversList}\n                initiateClickEvent={sendEmailToDrivers}\n              />\n            }\n          />\n          <Route component={Error}></Route>\n        </Routes>\n      </div>\n\n      <div>\n        <ApplicationFooter />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}