{"ast":null,"code":"var _jsxFileName = \"/Users/rafsanraqib/Documents/Cambridge Transportations/location-draft/src/Components/ListDrivers.js\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport { determineDistanceBetweenDriverPatient } from '../Geolocation/locationServices';\nimport { useSelector } from 'react-redux';\nimport determineLatLongFromAddress from '../Geolocation/locationServices';\nimport driversList from '../Model/driverModel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CheckboxListSecondary() {\n  _s();\n  const address = useSelector(patientData => patientData.pickupAddress);\n  var displayDrivers = [];\n\n  // const calculateNearestDriver = async() => {\n\n  //   const {lat, lng} = await determineLatLongFromAddress(address);\n  //   var optimumDriverList = [];\n  //   driversList.forEach(function (driver) {\n  //     const lat1 = driver.latitude;\n  //     const lng1 = driver.longitude;\n\n  //     var distance = determineDistanceBetweenDriverPatient(lat, lng, lat1, lng1);\n  //     const driverData = {id: driver.driverID, driverName: driver.name, vehicleId: driver.vehicleId, \n  //       distanceFromPatient: distance};\n\n  //     optimumDriverList.push(driverData);\n  //   });\n  //   optimumDriverList.sort(function(a,b){\n  //     return a.distanceFromPatient - b.distanceFromPatient\n  //   });\n  //   displayDrivers = optimumDriverList;\n  // };\n\n  // React.useEffect(() => {\n  //   calculateNearestDriver();\n  // }, [displayDrivers]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(List, {\n      dense: true,\n      sx: {\n        width: '100%',\n        maxWidth: 360\n      },\n      children: displayDrivers.map(value => {\n        const labelId = `checkbox-list-secondary-label-${value.driverID}`;\n        return /*#__PURE__*/_jsxDEV(ListItem, {\n          children: /*#__PURE__*/_jsxDEV(ListItemButton, {\n            children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n              children: /*#__PURE__*/_jsxDEV(Avatar, {\n                src: `/static/images/avatar/${value + 1}.jpg`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n              id: labelId,\n              primary: value.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)\n        }, value.vehicleId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 3\n  }, this);\n}\n_s(CheckboxListSecondary, \"cWMowvVqj6M5LJP318kdvOxUl3g=\", false, function () {\n  return [useSelector];\n});\n_c = CheckboxListSecondary;\nvar _c;\n$RefreshReg$(_c, \"CheckboxListSecondary\");","map":{"version":3,"names":["React","List","ListItem","ListItemButton","ListItemText","ListItemAvatar","Avatar","determineDistanceBetweenDriverPatient","useSelector","determineLatLongFromAddress","driversList","jsxDEV","_jsxDEV","CheckboxListSecondary","_s","address","patientData","pickupAddress","displayDrivers","children","dense","sx","width","maxWidth","map","value","labelId","driverID","src","fileName","_jsxFileName","lineNumber","columnNumber","id","primary","name","vehicleId","_c","$RefreshReg$"],"sources":["/Users/rafsanraqib/Documents/Cambridge Transportations/location-draft/src/Components/ListDrivers.js"],"sourcesContent":["\nimport * as React from 'react';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport {determineDistanceBetweenDriverPatient} from '../Geolocation/locationServices';\nimport { useSelector } from 'react-redux'\nimport determineLatLongFromAddress from '../Geolocation/locationServices'\nimport driversList from '../Model/driverModel';\n\nexport default function CheckboxListSecondary() {\n\n  const address = useSelector(\n    (patientData => patientData.pickupAddress));\n\n  var displayDrivers = [];\n\n  // const calculateNearestDriver = async() => {\n\n  //   const {lat, lng} = await determineLatLongFromAddress(address);\n  //   var optimumDriverList = [];\n  //   driversList.forEach(function (driver) {\n  //     const lat1 = driver.latitude;\n  //     const lng1 = driver.longitude;\n\n  //     var distance = determineDistanceBetweenDriverPatient(lat, lng, lat1, lng1);\n  //     const driverData = {id: driver.driverID, driverName: driver.name, vehicleId: driver.vehicleId, \n  //       distanceFromPatient: distance};\n\n  //     optimumDriverList.push(driverData);\n  //   });\n  //   optimumDriverList.sort(function(a,b){\n  //     return a.distanceFromPatient - b.distanceFromPatient\n  //   });\n  //   displayDrivers = optimumDriverList;\n  // };\n\n  // React.useEffect(() => {\n  //   calculateNearestDriver();\n  // }, [displayDrivers]);\n\n  return (\n  <div>\n    <List dense sx={{ width: '100%', maxWidth: 360}}>\n      {displayDrivers.map((value) => {\n        const labelId = `checkbox-list-secondary-label-${value.driverID}`;\n        return (\n          <ListItem key={value.vehicleId}>\n            <ListItemButton>\n              <ListItemAvatar>\n                <Avatar\n                  src={`/static/images/avatar/${value + 1}.jpg`}\n                />\n              </ListItemAvatar>\n              <ListItemText id={labelId} primary={value.name} />\n            </ListItemButton>\n          </ListItem>\n        );\n      })}\n    </List>\n  </div>\n  );\n}"],"mappings":";;AACA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,cAAc,MAAM,8BAA8B;AACzD,OAAOC,YAAY,MAAM,4BAA4B;AACrD,OAAOC,cAAc,MAAM,8BAA8B;AACzD,OAAOC,MAAM,MAAM,sBAAsB;AACzC,SAAQC,qCAAqC,QAAO,iCAAiC;AACrF,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,2BAA2B,MAAM,iCAAiC;AACzE,OAAOC,WAAW,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,eAAe,SAASC,qBAAqBA,CAAA,EAAG;EAAAC,EAAA;EAE9C,MAAMC,OAAO,GAAGP,WAAW,CACxBQ,WAAW,IAAIA,WAAW,CAACC,aAAa,CAAE;EAE7C,IAAIC,cAAc,GAAG,EAAE;;EAEvB;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA,oBACAN,OAAA;IAAAO,QAAA,eACEP,OAAA,CAACX,IAAI;MAACmB,KAAK;MAACC,EAAE,EAAE;QAAEC,KAAK,EAAE,MAAM;QAAEC,QAAQ,EAAE;MAAG,CAAE;MAAAJ,QAAA,EAC7CD,cAAc,CAACM,GAAG,CAAEC,KAAK,IAAK;QAC7B,MAAMC,OAAO,GAAI,iCAAgCD,KAAK,CAACE,QAAS,EAAC;QACjE,oBACEf,OAAA,CAACV,QAAQ;UAAAiB,QAAA,eACPP,OAAA,CAACT,cAAc;YAAAgB,QAAA,gBACbP,OAAA,CAACP,cAAc;cAAAc,QAAA,eACbP,OAAA,CAACN,MAAM;gBACLsB,GAAG,EAAG,yBAAwBH,KAAK,GAAG,CAAE;cAAM;gBAAAI,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA;YAC9C;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,QACa,eACjBpB,OAAA,CAACR,YAAY;cAAC6B,EAAE,EAAEP,OAAQ;cAACQ,OAAO,EAAET,KAAK,CAACU;YAAK;cAAAN,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,QAAG;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QACnC,GARJP,KAAK,CAACW,SAAS;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QASnB;MAEf,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACG;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACH;AAER;AAAClB,EAAA,CApDuBD,qBAAqB;EAAA,QAE3BL,WAAW;AAAA;AAAA6B,EAAA,GAFLxB,qBAAqB;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}